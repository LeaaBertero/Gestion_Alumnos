@page "/api/ListaAlumnos/crear"
@inject IHttpServicio http
@inject NavigationManager navigationManager
@inject HttpClient _http
@using Gestion_Alumnos.Shared.DTO
@using Proyecto_Alumnos.BD.Data.Entidades

<h3>Nuevo Alumno</h3>




<EditForm Model="alumno" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Campos para los datos del alumno -->
    <div class="form-group">
        <label for="CarreraId">Carrera</label>
        <InputSelect class="form-control" id="CarreraId" @bind-Value="alumno.CarreraId">
            <option value="">Seleccione...</option>
            @foreach (var carrera in carreras)
            {
                <option value="@carrera.Id">@carrera.Nombre</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Nombre</label>
        <InputText class="form-control" @bind-Value="alumno.Nombre" />
        <ValidationMessage For="@(() => alumno.Nombre)" />
    </div>

    <div class="form-group">
        <label>Apellido</label>
        <InputText class="form-control" @bind-Value="alumno.Apellido" />
        <ValidationMessage For="@(() => alumno.Apellido)" />
    </div>

    <div class="form-group">
        <label>Documento</label>
        <InputText class="form-control" @bind-Value="alumno.Documento" />
        <ValidationMessage For="@(() => alumno.Documento)" />
    </div>

    <div class="form-group">
        <label for="TipoDocumentoId">Tipo de Documento</label>
        <InputSelect class="form-control" id="TipoDocumentoId" @bind-Value="alumno.TipoDocumentoId">
            <option value="">Seleccione...</option>
            @foreach (var tipo in tiposDocumentos)
            {
                <option value="@tipo.Id">@tipo.Nombre</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Teléfono</label>
        <InputText class="form-control" @bind-Value="alumno.Telefono" />
        <ValidationMessage For="@(() => alumno.Telefono)" />
    </div>


    <div class="form-group">
        <label>Domicilio</label>
        <InputText class="form-control" @bind-Value="alumno.Domicilio" />
        <ValidationMessage For="@(() => alumno.Domicilio)" />
    </div>



    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="alumno.Email" />
        <ValidationMessage For="@(() => alumno.Email)" />
    </div>


    <div class="form-group">
        <label>Contraseña</label>
        <InputText class="form-control" @bind-Value="alumno.Contrasena" />
        <ValidationMessage For="@(() => alumno.Contrasena)" />
    </div>


    <div class="form-group">
        <label>Sexo</label>
        <InputText class="form-control" @bind-Value="alumno.Sexo" />
        <ValidationMessage For="@(() => alumno.Sexo)" />
    </div>

    <div class="form-group">
        <label>Fecha de nacimiento</label>
        <InputDate class="form-control" @bind-Value="alumno.FechaNacimiento" />
        <ValidationMessage For="@(() => alumno.FechaNacimiento)" />
    </div>

    <div class="form-group">
        <label>Edad</label>
        <InputNumber class="form-control" @bind-Value="alumno.Edad" />
        <ValidationMessage For="@(() => alumno.Edad)" />
    </div>


    <div class="form-group">
        <label>CUIL</label>
        <InputText class="form-control" @bind-Value="alumno.CUIL" />
        <ValidationMessage For="@(() => alumno.CUIL)" />
    </div>


    <div class="form-group">
        <label>Pais</label>
        <InputText class="form-control" @bind-Value="alumno.Pais" />
        <ValidationMessage For="@(() => alumno.Pais)" />
    </div>

    <div class="form-group">
        <label>Provincia</label>
        <InputText class="form-control" @bind-Value="alumno.Provincia" />
        <ValidationMessage For="@(() => alumno.Provincia)" />
    </div>

    <div class="form-group">
        <label>Departamento</label>
        <InputText class="form-control" @bind-Value="alumno.Departamento" />
        <ValidationMessage For="@(() => alumno.Departamento)" />
    </div>



    <div class="form-group">
        <label>Titulo Base</label>
        <InputText class="form-control" @bind-Value="alumno.TituloBase" />
        <ValidationMessage For="@(() => alumno.TituloBase)" />
    </div>

    <!-- Agregando los Checkboxes para los trámites -->
    <div class="form-group">
        <label for="TieneFotocopiaDNI">Fotocopia de DNI</label>
        <InputCheckbox class="form-check-input" id="TieneFotocopiaDNI" @bind-Value="FotocopiaDNIBool" />
    </div>

    <div class="form-group">
        <label for="TieneConstanciaCUIL">Constancia CUIL</label>
        <InputCheckbox class="form-check-input" id="TieneConstanciaCUIL" @bind-Value="ConstanciaCUILBool" />
    </div>

    <div class="form-group">
        <label for="TienePartidaNacimiento">Partida de Nacimiento</label>
        <InputCheckbox class="form-check-input" id="TienePartidaNacimiento" @bind-Value="PartidaNacimientoBool" />
    </div>

    <div class="form-group">
        <label for="TieneAnalitico">Analítico</label>
        <InputCheckbox class="form-check-input" id="TieneAnalitico" @bind-Value="AnaliticoBool" />
    </div>

    <div class="form-group">
        <label for="TieneFotoCarnet">Foto Carnet</label>
        <InputCheckbox class="form-check-input" id="TieneFotoCarnet" @bind-Value="FotoCarnetBool" />
    </div>

    <div class="form-group">
        <label for="TieneCUS">CUS</label>
        <InputCheckbox class="form-check-input" id="TieneCUS" @bind-Value="CUSBool" />
    </div>

    <button class="btn btn-primary" type="submit">Aceptar</button>
    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>

<Confirmacion @ref="confirmacion"
              Titulo="¡Genial!"
              textCancelar="Cerrar"
              onConfirm="Cancelar">
    <h4>¡Acabas de matricularte!</h4>
    <br>
    <p>Pulsa aceptar para continuar</p>
</Confirmacion>

@code {
    private CrearAlumnoDTO alumno = new CrearAlumnoDTO();
    private List<Carrera> carreras = new List<Carrera>();
    private List<TipoDocumento> tiposDocumentos = new List<TipoDocumento>();
    Confirmacion confirmacion;

    private bool FotocopiaDNIBool
    {
        get => alumno.FotocopiaDNI == "Sí";
        set => alumno.FotocopiaDNI = value ? "Sí" : "No";
    }

    private bool ConstanciaCUILBool
    {
        get => alumno.ConstanciaCUIL == "Sí";
        set => alumno.ConstanciaCUIL = value ? "Sí" : "No";
    }

    private bool PartidaNacimientoBool
    {
        get => alumno.PartidaNacimiento == "Sí";
        set => alumno.PartidaNacimiento = value ? "Sí" : "No";
    }

    private bool AnaliticoBool
    {
        get => alumno.Analitico == "Sí";
        set => alumno.Analitico = value ? "Sí" : "No";
    }

    private bool FotoCarnetBool
    {
        get => alumno.FotoCarnet == "Sí";
        set => alumno.FotoCarnet = value ? "Sí" : "No";
    }

    private bool CUSBool
    {
        get => alumno.CUS == "Sí";
        set => alumno.CUS = value ? "Sí" : "No";
    }

    protected override async Task OnInitializedAsync()
    {
        // Cargar las listas para que aparezcan
        var httpRespuestaCarreras = await http.Get<List<Carrera>>("api/Carrera");
        if (!httpRespuestaCarreras.Error)
        {
            carreras = httpRespuestaCarreras.respuesta;
        }

        // Cargar las listas para que aparezcan
        var httpRespuestaTiposDocumentos = await http.Get<List<TipoDocumento>>("api/TipoDocumento");
        if (!httpRespuestaTiposDocumentos.Error)
        {
            tiposDocumentos = httpRespuestaTiposDocumentos.respuesta;
        }
    }

    private async Task Grabar()
    {
        // Crear un DTO combinado para enviar todo en un solo POST
        var entidadDTO = new CrearAlumnoDTO
            {
                Nombre = alumno.Nombre,
                Apellido = alumno.Apellido,
                Documento = alumno.Documento,
                TipoDocumentoId = alumno.TipoDocumentoId,
                Domicilio = alumno.Domicilio,
                Telefono = alumno.Telefono,
                Email = alumno.Email,
                Contrasena = alumno.Contrasena,
                Sexo = alumno.Sexo,
                FechaNacimiento = alumno.FechaNacimiento,
                Edad = alumno.Edad,
                CUIL = alumno.CUIL,
                Pais = alumno.Pais,
                Provincia = alumno.Provincia,
                Departamento = alumno.Departamento,
                CarreraId = alumno.CarreraId,
                TituloBase = alumno.TituloBase,
                Estado = true,
                FotocopiaDNI = alumno.FotocopiaDNI,
                ConstanciaCUIL = alumno.ConstanciaCUIL,
                PartidaNacimiento = alumno.PartidaNacimiento,
                Analitico = alumno.Analitico,
                FotoCarnet = alumno.FotoCarnet,
                CUS = alumno.CUS
            };


        try
        {
            var response = await _http.PostAsJsonAsync("api/Alumnos", entidadDTO);
            var responseText = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Respuesta de la API: {responseText}");

            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
                confirmacion.Ver();
            }
            else
            {
                Console.WriteLine($"Error en la API: {response.StatusCode}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }


    private void Cancelar()
    {
        navigationManager.NavigateTo("/");
    }
}